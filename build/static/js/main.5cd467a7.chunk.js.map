{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","sys","main","temp","weather","stop","this","components_Titles","components_Form","components_Weather","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5cd467a7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Titles = () => (\r\n  <div>\r\n    <h1 className=\"title-container__title\">Victors Weather App</h1>\r\n  </div>\r\n);\r\n\r\nexport default Titles;\r\n\r\n// The component for the title text\r\n// It's a stateless functional component since this component does not contains any states\r\n","import React from \"react\";\r\n\r\nconst Form = props => (\r\n  <form onSubmit={props.getWeather}>\r\n    <input type=\"text\" name=\"city\" placeholder=\"City\" />\r\n    <input type=\"text\" name=\"country\" placeholder=\"Country\" />\r\n    <button>Show Weather</button>\r\n  </form>\r\n);\r\n\r\nexport default Form;\r\n\r\n// The component for the text inputs and the button\r\n// It's a stateless functional component since this component does not contains any states\r\n","import React from \"react\";\r\n\r\nconst Weather = props => (\r\n  <div className=\"weather__info\">\r\n    {props.city && props.country && props.temperature &&\r\n    <p className=\"weather__key\">The temperature in {props.city}, {props.country} is {props.temperature} degrees</p>}\r\n    {props.description && <p className=\"weather__key\">Its {props.description}</p>}\r\n    {props.error && <p className=\"weather__key\">{props.error}</p>}\r\n  </div>\r\n);\r\n\r\nexport default Weather;\r\n\r\n// The component for the outputs\r\n// It's a stateless functional component since this component does not contains any states\r\n","import React from \"react\";\r\n\r\nimport Titles from \"./components/Titles\";\r\nimport Form from \"./components/Form\";\r\nimport Weather from \"./components/Weather\";\r\n\r\nconst API_KEY = \"a006750ca4dde6fb4a27c7a510e15e11\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    city: undefined,\r\n    country: undefined,\r\n    temperature: undefined,\r\n    description: undefined,\r\n    error: undefined\r\n  }\r\n  // the initial states\r\n\r\n  getWeather = async (e) => {\r\n    e.preventDefault();\r\n    const city = e.target.elements.city.value;\r\n    const country = e.target.elements.country.value;\r\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&units=metric&appid=${API_KEY}`);\r\n    const data = await api_call.json();\r\n    //calling the API\r\n\r\n    if (city && country) {\r\n\r\n      this.setState({\r\n        city: data.name,\r\n        country: data.sys.country,\r\n        temperature: data.main.temp,\r\n        description: data.weather[0].description,\r\n        error: \"\"\r\n      });\r\n    } else {\r\n      this.setState({\r\n        city: undefined,\r\n        country: undefined,\r\n        temperature: undefined,\r\n        description: undefined,\r\n        error: \"Please enter a location\"\r\n      });\r\n    }\r\n    // get the data from the API if the user has filled in both city and country and chnage the state\r\n    // display error message otherwise\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"wrapper\">\r\n          <div className=\"main\">\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"title-container\">\r\n                  <Titles />\r\n                </div>\r\n                <div className=\"form-container\">\r\n                  <Form getWeather={this.getWeather}/>\r\n                  <Weather\r\n                    city={this.state.city}\r\n                    country={this.state.country}\r\n                    temperature={this.state.temperature}\r\n                    description={this.state.description}\r\n                    error={this.state.error}\r\n                   />\r\n                </div>\r\n                {/*passing the props to the components*/}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.register();\n"],"sourceRoot":""}